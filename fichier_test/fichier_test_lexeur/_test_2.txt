# Test 1: Structure de contrôle imbriquée avec opérations complexes
def calculatrice_avancee():
    a = 15
    b = 3
    if a // b == 5:
        if a % b == 0:
            print("Division exacte")
        else:
            print("Division avec reste")
            if a > 10 and b < 5:
                return a * b
    return None

# Test 2: Boucles imbriquées et conditions multiples
def motif_complexe():
    nombres = [1, 2, 3, 4]
    for i in nombres:
        for j in nombres:
            if i != j and i < j:
                if i * j > 5:
                    print(i + j)
                else:
                    print(i * j)

# Test 3: Manipulation de chaînes complexes
def test_chaines():
    msg1 = "Ligne 1\n\n\"Citation\"\nLigne 4"
    msg2 = "Test des \" guillemets"
    msg3 = "Test\nMulti\nLigne"
    return msg1

# Test 4: Test exhaustif des identifiants
_test = 1
test_ = 2
TEST_MAJUSCULE = 3
test_minuscule = 4
Test_Mixte_123 = 5
_123_test = 6
TeStMiXtE = 7
t1e2s3t4 = 8

# Test 5: Expressions logiques complexes
def test_logique():
    a = 10
    b = 20
    c = 30
    if (a < b and b < c) or not (a == b):
        if a != b and not (b > c or c < a):
            return True
        else:
            return False
    return None

# Test 6: Test de tous les types de nombres
def test_nombres():
    n1 = 0
    n2 = 1
    n3 = 123
    n4 = 9999
    n5 = 1000000
    return n1 + n2 + n3 + n4 + n5

# Test 7: Commentaires variés
# Commentaire simple
def test_commentaires():
    x = 1 # Commentaire après code
    # Commentaire avant code
    y = 2
    z = 3 # Commentaire avec symboles: +*//[](){}"'
    # Commentaire avec indentation étrange:        !!!
    return x + y + z

# Test 8: Mélange de toutes les structures
def programme_test_complet():
    # Initialisation des variables
    _compteur = 0
    _resultat = None
    message = "Test\n\"complexe\""
    
    for valeur in [1, 2, 3, 4, 5]:
        if valeur > 0 and valeur < 4:
            _compteur = _compteur + valeur
        else:
            if valeur >= 4:
                _resultat = valeur * 2
            else:
                _resultat = valeur // 2
        
        if _compteur != 0 and not _resultat == None:
            print("Traitement en cours")
    
    return True

# Test 9: Cas limites d'indentation
def test_indentation_limite():
    x = 1
    if x > 0:
                    if x < 10:
                              print("très indenté")
                    else:
                              print("moins indenté")
    else:
                    if x < 0:
                            print("indentation variée")
                            print("encore plus indenté")

# Test 10: Expressions arithmétiques complexes
def calculs_complexes():
    a = 5
    b = 3
    c = 2
    resultat = (a + b) * c // (a - b) + (-c)
    autre = a * b + c * (a + b * c) // (a - b)
    return resultat + autre

# Test 11: Tests de comparaisons multiples
def test_comparaisons():
    x = 42
    if x > 0 and x < 100:
        if x >= 42 and x <= 50:
            if x == 42 or x != 43:
                return True
    return False

# Test 12: Programme avec beaucoup d'opérations sur les chaînes
def manipulations_chaines():
    chaine1 = "Premier\n\"niveau\""
    chaine2 = "Second\\niveau"
    chaine3 = "Troisieme\"niveau\""
    print(chaine1)
    print(chaine2)
    return chaine3

# Test 13: Combinaison de boucles et conditions
def structure_complexe():
    valeurs = [1, 2, 3, 4, 5]
    compteur = 0
    for val in valeurs:
        if val > 2:
            if val < 5:
                for i in valeurs:
                    if i != val:
                        compteur = compteur + 1
    return compteur

# Test 14: Utilisation de tous les mots-clés
def test_mots_cles():
    x = True
    y = False
    z = None
    if not x and y:
        return z
    else:
        for i in [1, 2, 3]:
            if i in [1, 2]:
                print(i)
            else:
                return None
    return True or False

# Test 15: Opérations imbriquées
def operations_imbriquees():
    a = ((5 + 3) * (2 // 1)) - (-3)
    b = 2 * (3 + (4 * (5 - (6 // 2))))
    c = ((a + b) * (a - b)) // (a % b)
    return (a + b + c)